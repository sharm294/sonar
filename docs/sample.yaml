################################################################################
# Sonar Configuration File
#
# DEPRECATED
# This file is outdated and Sonar is no longer compatible with it. However,
# some of the contents of this file has potentially useful information about
# the core JSON format and so it is kept as old documentation.
################################################################################

# Optional Meta Data #
Company:
Engineer:
Project_Name:
Target_Devices:
Tool_Versions:
Description:
Dependencies:

# Required Data #
Module_Name: sample
Timescale: 1ns / 1ps # the default timescale of the simulation
Time_Format: {unit: "1us", precision: 3} # can be one of s, ms, us, ns, ps, fs
Flag_Count: 4 # even if not using, must be non zero for now
################################################################################

# This defines the DUT. The type:clock must be specified only on clocks that the
# the testbench must generate. Size is assumed to be 1 if omitted for signals.
# All directions are relative to the DUT.
#
# For interfaces, the default is defined in its interface file. Here, AXI-S
# assumes that its name in Verilog is name_channelName (e.g. axis_output_TDATA).
# c_struct and c_stream are tags needed for C++ to identify the name of the
# struct variable that is used to read/write data and the struct used to define
# the stream (i.e. what channels exist) respectively. These names can be seen in
# sample.hpp. If C sim is not required, they can be omitted.
DUT:
  - {direction: input, name: ap_clk, type: clock, period: 20ns}
  - {direction: input, name: ap_rst_n, type: reset}
  - {direction: output, size: 3, name: state_out_V}
  - {direction: master, name: axis_output, type: axis, clock: ap_clk,
    c_struct: axis_word, c_stream: uaxis_l, channels: [
      {name: "TDATA", type: "tdata", size: 64},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: slave, name: axis_input, type: axis, clock: ap_clk,
    c_struct: axis_word, c_stream: uaxis_l, channels: [
      {name: "TDATA", type: "tdata", size: 64},
      {name: "TVALID", type: "tvalid"},
      {name: "TREADY", type: "tready"},
      {name: "TLAST", type: "tlast"}
    ]}
  - {direction: mixed, name: s_axi_ctrl_bus, type: s_axilite, clock: ap_clk,
    reset: ap_rst_n, registers: [enable], regAddrs: [0x10], address_range: 4K,
    address_offset: 0, connectionMode: ip, channels: [
      {name: AWVALID, type: awvalid},
      {name: AWREADY, type: awready},
      {name: AWADDR, type: awaddr, size: 5},
      {name: WVALID, type: wvalid},
      {name: WREADY, type: wready},
      {name: WDATA, type: wdata, size: 32},
      {name: WSTRB, type: wstrb, size: 4},
      {name: ARVALID, type: arvalid},
      {name: ARREADY, type: arready},
      {name: ARADDR, type: araddr, size: 5},
      {name: RVALID, type: rvalid},
      {name: RREADY, type: rready},
      {name: RDATA, type: rdata, size: 32},
      {name: RRESP, type: rresp, size: 2},
      {name: BVALID, type: bvalid},
      {name: BREADY, type: bready},
      {name: BRESP, type: bresp, size: 2}
    ]}
  - {direction: output, name: ack_V}

# This defines the test vectors. There may be one or more test vectors with each
# test vector made up of one or more parallel sections. Each parallel section
# occurs, as the name suggests, in parallel and independently during the
# testbench. Here, YAML syntax for referencing is used with & and *.
#
# Fields may also make use of syntax like "{AMHeader,0xAA,0xCC,0,0xE,1,2}" where
# python will concatenate and bitshift an integer for you using the first string
# as the type. Refer to include/strToInt.py for more information
#
# Interface payloads can make use of loops that can be nested to send packets.
Initialize: &Initialize
  - wait: {key: ap_clk} # enforce changing signals at negative edge of clocks
  - macro: INIT_SIGNALS # initialize all input signals to zero at t=0
  - delay: 40ns # all delays are multiples of 20ns (clock period) for negedge
  - signal: # set the following signals to the specified values
    - {name: ap_rst_n, value: 1}
    - {name: axis_output_TREADY, value: 1}

# This is one test vector that is defined. Whether it gets run is determined by
# enabling it below under Test_Vectors.
Example: &Example
  - Parallel_Section_0: *Initialize # YAML syntax for a reference/pointer
  - Parallel_Section_1:
    - delay: 100ns
    - timestamp: INIT # INIT sets a reference point to compare time to
    - interface: {type: s_axilite, name: s_axi_ctrl_bus, payload: [
      {mode: 1, data: 0x1, addr: 0x10} # write is mode = 1
    ]}
    - interface: {type: axis, name: axis_input, payload: [
      {loop: { start: 0, end: 1, body: [ # Trivial loop as an example
        {loop: { start: 0, end: 1, body: [
          {tdata: "0xABCD", tkeep: "KEEP_ALL", callTB: 2}
        ]}}
      ]}}
    ]}
    - wait: {key: "ack", value: 1}
    - interface: {type: axis, name: axis_input, payload: [
      {tdata: "0", callTB: 3} # callTB calls the DUT func. 3 times in C++
    ]}
    - wait: {key: "ack", value: 1}
    - delay: 110ns # the time scale must be specified
    - flag: {set_flag: 0} # flags must use set_flag: $flag_number to set it to 1
  - Parallel_Section_2:
    - interface: {type: axis, name: axis_output, payload: [
      {tdata: 1, callTB: 1} # numbers can be base 2, 10, or 16 as int or str
    ]}
    - wait: {key: "flag", value: 0}
    - flag: {clear_flag: 0} # flags must be cleared to reuse
    - interface: {type: s_axilite, name: s_axi_ctrl_bus, payload: [
      {mode: 0, data: 0x1, addr: 0x10} # read is mode = 0
    ]}
    - timestamp: End # prints the elapsed time since INIT + the str argument
    - display: "The_simulation_is_finished."
    - macro: END # for C++, the parallel section with this macro must be last

# These wait conditions are inserted directly into the systemverilog testbench
# and so must be valid syntax (minus any variable substitutions.) Variables may
# be $value (referring to the value key in a wait packet). For now, only a
# single argument can be passed to the wait. To use the wait, use the key in the
# test vector to identify which wait condition to use.
#
# If you use signals in the wait, their names should match the names defined
# above.
Wait_Conditions:
  - {condition: "wait(ack_V == $value);", key: "ack"}
  - {condition: "wait(flags[$value]);", key: "flag"}
  - {condition: "@(negedge ap_clk);", key: ap_clk}

# A list of all the test vectors that are actually called, which can be defined
# above and referenced here. Alternatively, they could all be listed here.
# Test_Vector_x starts at 0 and goes up to n.
Test_Vectors:
  - Test_Vector_0: *Example
