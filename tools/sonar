#!/usr/bin/env python
import argparse
import logging.config
import os
import dbm
import shelve

import sonar.database
from sonar.cli import *
from sonar.include import ReturnValue, Constants, sonarrc_exists


def activate(subparser):
    parser_activate = subparser.add_parser(
        "activate", help="Activate an environment profile"
    )

    parser_activate.add_argument(
        "profile",
        type=str,
        help="Name of the profile to activate. See 'sonar profile --help'",
    )
    parser_activate.set_defaults(func=handle_activate)


def env(parser):
    subparser = parser.add_parser(
        "env", help="Manage the sonar environment", add_help=False
    )
    subsubparser = subparser.add_subparsers(title="Commands", metavar="command")

    env_types = ", ".join(vars(sonar.database.Environment()))

    def add():
        command = subsubparser.add_parser(
            "add",
            help="Add to sonar's environment database",
            add_help=False,
            description=f"""Adds an environment variable to sonar's database. These saved
            variables can then be used to create one or more profiles that can be
            activated through 'sonar activate'.

            The type must be one of: {env_types}.

            Names must be unique within a variable type.
            """,
        )
        command_group = command.add_argument_group("Arguments")
        command_group.add_argument("type", type=str, help="Type of env variable to add")
        command_group.add_argument("name", type=str, help="Name of variable")
        command_group.add_argument("value", type=str, help="Value to set to variable")
        command.set_defaults(func=handler_env_add)
        add_help(command)

    def remove():
        command = subsubparser.add_parser(
            "remove",
            help="Remove from sonar's environment database",
            add_help=False,
            description=f"""Removes an environment variable from sonar's database.

            The type must be one of: {env_types}.
            """,
        )
        command_group = command.add_argument_group("Arguments")
        command_group.add_argument(
            "type", type=str, help="Type of env variable to remove"
        )
        command_group.add_argument("name", type=str, help="Name of variable")
        command.set_defaults(func=handler_env_remove)
        add_help(command)

    def edit():
        command = subsubparser.add_parser(
            "edit",
            help="Edit a variable in sonar's environment database",
            add_help=False,
            description=f"""Removes an environment variable from sonar's database.

            The type must be one of: {env_types}.
            """,
        )
        command_group = command.add_argument_group("Arguments")
        command_group.add_argument(
            "type", type=str, help="Type of env variable to edit"
        )
        command_group.add_argument("name", type=str, help="Name of variable")
        command_group.add_argument("value", type=str, help="Value to set to variable")
        command.set_defaults(func=handler_env_edit)
        add_help(command)

    add()
    remove()
    edit()
    add_help(subparser)


def add_help(parser):
    command_group = parser.add_argument_group("Options")
    command_group.add_argument(
        "-h", "--help", action="help", help="show this help message and exit"
    )


def init(subparser):
    parser_activate = subparser.add_parser(
        "init", help="Initialize sonar. Run for a new user using sonar"
    )

    parser_activate.set_defaults(func=handle_init)


def configure_logging():
    config = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "fileFormatter": {
                "format": "%(asctime)s - %(levelname)s - %(name)s:%(lineno)d - %(message)s",
                "datafmt": "%H:%M:%S",
            },
            "consoleFormatter": {
                "format": "%(levelname)s - %(message)s",
                "datafmt": "",
            },
        },
        "handlers": {
            "consoleHandler": {
                "class": "logging.StreamHandler",
                "level": "WARNING",
                "formatter": "consoleFormatter",
                "stream": "ext://sys.stdout",
            },
            "fileHandler": {
                "class": "logging.FileHandler",
                "level": "INFO",
                "formatter": "fileFormatter",
                "filename": Constants.SONAR_LOG,
                "mode": "a",
            },
        },
        "loggers": {
            "": {"level": "DEBUG", "handlers": ["consoleHandler", "fileHandler"]}
        },
    }

    logging.config.dictConfig(config)


def main():
    parser = argparse.ArgumentParser(
        prog="sonar",
        description="sonar is a tool to manage and test your hardware projects.",
        # usage="%(prog)s [-h] command [command args]",
        add_help=False,
    )
    subparser = parser.add_subparsers(title="Commands", metavar="command")
    activate(subparser)
    env(subparser)
    init(subparser)

    add_help(parser)

    args = parser.parse_args()
    try:
        db = shelve.open(Constants.SONAR_DATABASE, "r")
    except dbm.error:
        handle_init(None)
    configure_logging()
    retval = args.func(args)
    if retval != ReturnValue.SONAR_OK:
        exit(retval)


if __name__ == "__main__":
    main()
